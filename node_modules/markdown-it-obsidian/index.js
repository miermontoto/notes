'use strict'

const Plugin = require('markdown-it-regexp')
const extend = require('extend')
const sanitize = require('sanitize-filename')

module.exports = (options) => {

	const defaults = {
		baseURL: '/',
		relativeBaseURL: './',
		makeAllLinksAbsolute: false,
		uriSuffix: '',
		htmlAttributes: {
		},
		generatePageNameFromLabel: (label) => {
			return label
		},
		postProcessPageName: (pageName) => {
			pageName = pageName.trim()
			pageName = pageName.split('/').map(sanitize).join('/')
			pageName = pageName.replace(/\s+/, '_')
			return pageName
		},
		postProcessLabel: (label) => {
			label = label.trim()
			return label
		}
	}

	options = extend(true, defaults, options)

	function removeInitialSlashes(str) {
		return str.replace(/^\/+/g, '')
	}

	return Plugin(/!?\[\[(([^\]#\|]*)(#[^\|\]]+)*(\|[^\]]*)*)\]\]/, (match, utils) => {
		let label = ''
		let pageName = ''
		let href = ''
		if (match[3]) {
			label = match[3]
			pageName = match[1]
		} else {
			label = match[1]
			pageName = options.generatePageNameFromLabel(label)
		}

		label = options.postProcessLabel(label)
		pageName = options.postProcessPageName(pageName)

		// make sure none of the values are empty
		if (!label || !pageName) {
			return match.input
		}

		pageName = removeInitialSlashes(pageName)
		href = options.baseURL + pageName + options.uriSuffix

		const fs = require("fs")
		const path = require("path")
		let avoid = ['.git','_site','node_modules','.obsidian','.vscode']

		const getAllFiles = function(dirPath, arrayOfFiles) {
			let files = fs.readdirSync(dirPath);

			var arrayOfFiles = arrayOfFiles || [];

			files.forEach(function(file) {
				let skip = false;
				avoid.forEach(function(f) {
					if (f == file) skip = true;
				})

				if (!skip) {
					if (fs.statSync(dirPath + "/" + file).isDirectory()) {
						arrayOfFiles = getAllFiles(dirPath + "/" + file, arrayOfFiles);
					} else {
						arrayOfFiles.push(path.join(dirPath, "/", file));
					}
				}
			})

			return arrayOfFiles;
		}

		let shortlists = [];
		getAllFiles(process.cwd()).forEach(function(file){
			// skip files in assets folder
			if (file.indexOf('/assets/') > -1) return;

			// if file name contains the obsidian string somewhere
			if (file.indexOf(match[1]) > -1){
				href = file.split(process.cwd())[1].split('.md')[0];
				// the value before it should be a slash.
				// e.g.
				// '/notes/CSS', '/notes/Device size specific CSS'
				// when searching for CSS 2nd link is not valid.
				let i = href.indexOf(match[1]);
				if(href[i-1] == '/') shortlists.push(href);
			}
		})
		href = '';
		// if there is more than one match, we look for exact match
		if (shortlists.length > 1) {
			shortlists.forEach(function(file) {
				if (match[1] == file) href = file;
			})
		} else if (shortlists.length == 1) {
			href = shortlists[0];
		}

		href = utils.escape(href)

		if (match[0].startsWith('!')) {
			if(match[0].endsWith('.pdf]]')) return `<object data="${href}" width="100%" height="100%"></object>`
			return `<img src="${href}"></img>`
		}

		let htmlAttrs = []
		htmlAttrs.push(`href="${href}"`)
		for (let attrName in options.htmlAttributes) {
			const attrValue = options.htmlAttributes[attrName]
			htmlAttrs.push(`${attrName}="${attrValue}"`)
		}

		return `<a ${htmlAttrs.join(' ')}>${label}</a>`
	})
}
